{"version":3,"file":"static/webpack/static/development/pages/index.js.940f2fc18be8117ee2ff.hot-update.js","sources":["webpack:///./components/OrnamentCanvas.tsx"],"sourcesContent":["import React from \"react\";\n\n// const drawLogo = (canvas: HTMLCanvasElement) => {\n//   const range = (start: number, end: number) =>\n//     start + Math.random() * (end - start);\n//   const rangeI = (start: number, end: number) => Math.floor(range(start, end));\n//   const rnd = (n: number) => Math.random() * n;\n//   const rndI = (n: number) => Math.floor(rnd(n));\n\n//   const shuffle = (a: number[]) => {\n//     var b = [];\n//     while (a.length > 0) {\n//       b.push(...a.splice(rndI(a.length)));\n//     }\n//     return b;\n//   };\n\n//   const canvasSize = 250;\n//   const count = 3;\n//   const steps = 300;\n//   const pi = Math.PI;\n//   const pi2 = Math.PI * 2;\n//   const pi05 = Math.PI * 0.5;\n//   const step = pi2 / steps;\n\n//   const picks = [rangeI(12, 16), rangeI(7, 11), rangeI(3, 5)];\n//   const radius = [range(150, 170)];\n//   const thickness = [rangeI(25, 40)];\n//   const squeezeOffset = [rnd(pi2)];\n\n//   const xxx = Math.max(0.005, rnd(0.01));\n//   const squeezeSpeed = [xxx, xxx, -xxx];\n\n//   const scale = canvasSize / 600;\n//   const ampReduce = 40 * scale;\n\n//   const lineWidth = shuffle([6 * 1.8, 7 * 1.8, 6 * 1.8]);\n\n//   canvas.width = canvasSize - 20;\n//   canvas.height = canvasSize - 20;\n//   const ctx = canvas.getContext(\"2d\");\n//   const x0 = canvas.width / 2;\n//   const y0 = canvas.height / 2;\n\n//   radius.push(radius[0]);\n//   radius.push(radius[0] - range(0, 10));\n\n//   thickness.push(thickness[0]);\n//   thickness.push(rangeI(25, 35));\n\n//   squeezeOffset.push(squeezeOffset[0] + pi);\n//   squeezeOffset.push(squeezeOffset[0] - pi / 2);\n\n//   const rotationOffset = squeezeOffset.slice();\n\n//   let a = [radius, thickness, lineWidth];\n\n//   for (let i = 0; i < a.length; i++) {\n//     let b = a[i];\n//     for (let j = 0; j < b.length; j++) {\n//       b[j] *= scale;\n//     }\n//   }\n\n//   const draw = () => {\n//     if (!ctx) {\n//       return;\n//     }\n//     ctx.clearRect(0, 0, canvasSize, canvasSize);\n//     let x, y, r, a, o, t, s, g, p;\n//     for (let j = 0; j < count; j++) {\n//       ctx.beginPath();\n//       ctx.lineWidth = lineWidth[j] * 1.6;\n//       squeezeOffset[j] += squeezeSpeed[j];\n//       rotationOffset[j] += squeezeSpeed[j];\n//       o = squeezeOffset[j];\n//       p = rotationOffset[j];\n//       g = ctx.createLinearGradient(\n//         x0 + radius[j] * Math.sin(pi05 + p),\n//         y0 + radius[j] * Math.cos(pi05 + p),\n//         x0 - radius[j] * Math.sin(pi05 + p),\n//         y0 - radius[j] * Math.cos(pi05 + p)\n//       );\n//       g.addColorStop(0.4, \"rgba(255, 255, 255, 1.0)\");\n//       g.addColorStop(1, \"rgba(255, 255, 255, 0.1)\");\n//       ctx.strokeStyle = g;\n//       for (let i = 0; i < steps; i++) {\n//         a = i * step;\n//         s = Math.cos(p + a);\n//         a += 0.4 * Math.sin(o + a);\n//         t = thickness[j] + ampReduce / 2;\n//         r =\n//           radius[j] -\n//           ampReduce +\n//           (t * (1 + Math.cos((i / steps) * pi2 * picks[j])) * (1.2 + s)) / 2;\n//         x = x0 + r * Math.cos(a);\n//         y = y0 + r * Math.sin(a);\n//         if (i === 0) {\n//           ctx.moveTo(x, y);\n//         } else {\n//           ctx.lineTo(x, y);\n//         }\n//       }\n//       ctx.closePath();\n//       ctx.stroke();\n//     }\n//     window.requestAnimationFrame(draw);\n//   };\n\n//   draw();\n// };\n\n// const HOOK_SVG =\n//   \"m129.03125 63.3125c0-34.914062-28.941406-63.3125-64.519531-63.3125-35.574219 0-64.511719 28.398438-64.511719 63.3125 0 29.488281 20.671875 54.246094 48.511719 61.261719v162.898437c0 53.222656 44.222656 96.527344 98.585937 96.527344h10.316406c54.363282 0 98.585938-43.304688 98.585938-96.527344v-95.640625c0-7.070312-4.640625-13.304687-11.414062-15.328125-6.769532-2.015625-14.082032.625-17.960938 6.535156l-42.328125 64.425782c-4.847656 7.390625-2.800781 17.3125 4.582031 22.167968 7.386719 4.832032 17.304688 2.792969 22.160156-4.585937l12.960938-19.71875v42.144531c0 35.582032-29.863281 64.527344-66.585938 64.527344h-10.316406c-36.714844 0-66.585937-28.945312-66.585937-64.527344v-162.898437c27.847656-7.015625 48.519531-31.773438 48.519531-61.261719zm-97.03125 0c0-17.265625 14.585938-31.3125 32.511719-31.3125 17.929687 0 32.511719 14.046875 32.511719 31.3125 0 17.261719-14.582032 31.3125-32.511719 31.3125-17.925781 0-32.511719-14.050781-32.511719-31.3125zm0 0\";\n// const HOOK_PATH = new Path2D(HOOK_SVG);\n// const SCALE = 0.3;\n// const OFFSET = 80;\n// function draw(ctx: any, location: any) {\n//   ctx.fillStyle = \"deepskyblue\";\n//   ctx.shadowColor = \"dodgerblue\";\n//   ctx.shadowBlur = 20;\n//   ctx.save();\n//   ctx.scale(SCALE, SCALE);\n//   ctx.translate(location.x / SCALE - OFFSET, location.y / SCALE - OFFSET);\n//   ctx.fill(HOOK_PATH);\n//   ctx.restore();\n// }\n\nexport const OrnamentCanvas: React.SFC = () => {\n  const canvasRef = React.useRef(null);\n\n  // useEffect(() => {\n  //   console.log(\"mounted\");\n  //   if (canvasRef) {\n  //     drawLogo(canvasRef as any);\n  //   }\n  // }, []);\n\n  return (\n    <canvas\n      width={68}\n      height={68}\n      onClick={() => {\n        const canvas = canvasRef.current;\n        const ctx = (canvas as any).getContext(\"2d\");\n        console.log(ctx);\n      }}\n    />\n    // <canvas\n    //   ref={canvasRef}\n    //   width={68}\n    //   height={68}\n    //   onClick={e => {\n    //     const canvas = canvasRef.current;\n    //     const ctx = (canvas as any).getContext(\"2d\");\n    //     draw(ctx, { x: e.clientX, y: e.clientY });\n    //   }}\n    // />\n  );\n};\n\n// interface IOwnState {\n//   showString: boolean;\n//   secondsFromBd: number;\n// }\n\n// export class OrnamentCanvas extends React.Component<any, IOwnState> {\n//   // private ornamentCanvas?: HTMLCanvasElement;\n//   private ornamentCanvas: React.RefObject<\n//     HTMLCanvasElement\n//   > = React.createRef();\n\n//   // public readonly state: IOwnState = {\n//   //   showString: false,\n//   //   secondsFromBd: 0\n//   // };\n\n//   public componentDidMount() {\n//     if (this.ornamentCanvas) {\n//       drawLogo(this.ornamentCanvas as any);\n//     }\n//     // this.setState({ secondsFromBd: this.calcSecondsFromBd() });\n//     // this.secondsTimer = setInterval(() => {\n//     //   this.setState({ secondsFromBd: this.calcSecondsFromBd() });\n//     // }, 1000);\n//   }\n\n//   // public componentWillUnmount() {\n//   //   if (this.secondsTimer) {\n//   //     clearInterval(this.secondsTimer);\n//   //   }\n//   // }\n\n//   public render() {\n//     return (\n//       <>\n//         <canvas ref=\"ornamentCanvas\" className=\"or-logo\" />\n\n//         <style jsx>{`\n//           .or-logo {\n//             width: 68px;\n//             height: 68px;\n//           }\n//         `}</style>\n//       </>\n//     );\n//   }\n// }\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}