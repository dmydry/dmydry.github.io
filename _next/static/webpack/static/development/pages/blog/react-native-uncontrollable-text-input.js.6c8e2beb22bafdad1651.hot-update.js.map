{"version":3,"file":"static/webpack/static/development/pages/blog/react-native-uncontrollable-text-input.js.6c8e2beb22bafdad1651.hot-update.js","sources":["webpack:///./pages/blog/react-native-uncontrollable-text-input.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { NextPage } from 'next';\nimport router from 'next/router';\n// import { UAParser } from 'ua-parser-js';\nimport Prism from 'prismjs';\n\nimport { Layout } from '../../components/Layout';\nimport '../../assets/styles.styl';\n\n// interface IOwnProps {\n//   ua: IUAParser.IResult;\n// }\n\nconst Blog: NextPage = () => {\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  return (\n    <>\n      <Layout title=\"Dmitriy Gurinenko | Dev Blog\">\n        <div className=\"container\">\n          <div className=\"text\">\n            <div>\n              <span className=\"hover\" onClick={router.back}>\n                &#9664;{' '}\n              </span>\n              04/09/2019\n            </div>\n            <div className=\"subtitle\">\n              React Native: uncontrollable TextInput & missed react updates\n            </div>\n            <br />\n            <p>\n              So what is this about? Let's imagine you've already know all the\n              RN basics but every day you try something new with your project.\n              Today I started to code a new form in our current react-native\n              app. After all layout hacks and a main part of a feature logic I\n              started to use a simple well-known condition like\n              <pre style={{ marginBottom: 100 }}>\n                <code className=\"language-javascript\">\n                  {`\n            style={[\n              styles.input,\n              {\n                color: isValid\n                  ? MAIN_COLORS.BLACK\n                  : MAIN_COLORS.ERROR,\n              },\n            ]}\n          `}\n                </code>\n              </pre>\n            </p>\n          </div>\n        </div>\n      </Layout>\n    </>\n  );\n};\n\n// Blog.getInitialProps = async ({ req }) => {\n//   const userAgent = req ? req.headers['user-agent'] : navigator.userAgent;\n//   const parser = new UAParser(userAgent);\n//   return { ua: parser.getResult() };\n// };\n\nexport default Blog;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}