{"version":3,"file":"static/webpack/static/development/pages/blog/react-native-uncontrollable-text-input.js.bebe6796f72dde228870.hot-update.js","sources":["webpack:///./pages/blog/react-native-uncontrollable-text-input.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { NextPage } from 'next';\nimport { useRouter } from 'next/router';\nimport Prism from 'prismjs';\n\nimport { Layout } from '../../components/Layout';\nimport '../../assets/styles.styl';\n\nconst Post1: NextPage = () => {\n  const router = useRouter();\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  const codeBlock1 = `\n  <TextInput\n    onChangeText={setValue}\n    style={[\n      styles.input,\n      {\n        color: isValid\n          ? MAIN_COLORS.BLACK\n          : MAIN_COLORS.ERROR,\n      },\n    ]}\n  />`;\n\n  const codeBlock2 = `\nconst [value, setValue] = useState();\n\n<TextInput\n  value={value}\n  onChangeText={setValue}\n  style={[\n    styles.input,\n    {\n      color: isValid\n        ? MAIN_COLORS.BLACK\n        : MAIN_COLORS.ERROR,\n    },\n  ]}\n/>`;\n\n  return (\n    <>\n      <Layout title=\"Dmitriy Gurinenko | Dev Blog\">\n        <div className=\"container\">\n          <div className=\"text\">\n            <span className=\"hover\" onClick={router.back}>\n              &#9664;{' '}\n            </span>\n            04/09/2019\n            <div className=\"subtitle\">\n              React Native: uncontrollable TextInput & missed react updates\n            </div>\n            <hr style={{ marginRigth: 20 }} />\n            <br />\n            <p>\n              So what is this about?\n              <br />\n              <br />\n              Let's imagine you've already know all the RN basics but every day\n              you try something new with your project. Today I started to code a\n              new form in our current react-native app. After all layout hacks\n              and logic hooks I started to use a simple well-known condition\n              like:\n            </p>\n            <pre>\n              <code className=\"language-javascript\">{codeBlock1}</code>\n            </pre>\n            <br />\n            <p>\n              Suddenly I stuck with a simple style prop. It just wasn't updating\n              that color. However when I tried to use an{' '}\n              <code className=\"language-javascript\">isValid</code> constant\n              somewhere else in the same Form (stateless/functional) component,\n              it has been rendered and updated correctly.\n              <br />\n              <br />\n              After a little googling I found a quite old opened issue -{' '}\n              <a href=\"https://github.com/facebook/react-native/issues/20131\">\n                <strong>\n                  https://github.com/facebook/react-native/issues/20131\n                </strong>\n              </a>{' '}\n              where guys explained a way to fix this. You just need to make your\n              TextInput controllable and add a{' '}\n              <code className=\"language-javascript\">value</code> prop. It should\n              use a state value from the{' '}\n              <code className=\"language-javascript\">setValue</code> callback;\n              <br />\n              <br />A full example of a working code:\n            </p>\n            <pre>\n              <code className=\"language-javascript\">{codeBlock2}</code>\n            </pre>\n          </div>\n        </div>\n      </Layout>\n    </>\n  );\n};\n\nexport default Post1;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAaA;AAgBA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}